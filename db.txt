-- create companies table
create table companies (
    id SERIAL PRIMARY KEY,
    name text null,
    address_street text null,
    address_city text null,
    address_state text null,
    address_country text null,
    address_zip smallint null,
    phone varchar(20) null,
    email text null,
    status varchar(10) not null check (status in ('Pending', 'Approved', 'Rejected')),
    registration_level text null,
    district text null,
    user_id uuid,

    created_at timestamptz not null default now(),
    updated_at timestamptz null,
    deleted_at timestamptz null
);

-- create directorsList table
create table directorsList (
    id SERIAL PRIMARY KEY,
    name text null,
    national_id text null,
    passport_no text null,
    created_at timestamptz not null default now(),
    updated_at timestamptz null,
    deleted_at timestamptz null,
    company_id bigint not null references companies(id) on delete cascade
);

-- create shareholdersList table
create table shareholdersList (
    id SERIAL PRIMARY KEY,
    name text null,
    percentage numeric(5, 2) not null check (percentage >= 0 and percentage <= 100),
    created_at timestamptz not null default now(),
    updated_at timestamptz null,
    deleted_at timestamptz null,
    company_id bigint not null references companies(id) on delete cascade
);

-- create businessesList table
create table businessesList (
    id SERIAL PRIMARY KEY,
    name text null,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone null,
    deleted_at timestamp with time zone null,
    company_id bigint not null references companies(id) on delete cascade
);

-- create required_documents table
CREATE TABLE required_documents (
    id SERIAL PRIMARY KEY,
    doc1 text NOT NULL,
    doc2 text NOT NULL,
    doc3 text NOT NULL,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone null,
    deleted_at timestamp with time zone null,
    company_id bigint not null references companies(id) on delete cascade
);

-- create indexes on foreign key columns for each table
create index directors_company_id_idx on directorsList (company_id);
create index shareholders_company_id_idx on shareholdersList (company_id);
create index businesses_company_id_idx on businessesList (company_id);
create index required_documents_id_idx on required_documents (company_id);


-- Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');


-- Create a table for required_documents
create table required_documents (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  doc1_url text,
  doc2_url text,
  doc3_url text
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security for more details.
alter table required_documents
  enable row level security;

create policy "Public profiles are viewable by everyone." on required_documents
  for select using (true);

create policy "Users can insert their own documents." on required_documents
  for insert with check (auth.uid() = id);

create policy "Users can update own documents." on required_documents
  for update using (auth.uid() = id);

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('documents', 'documents');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Documents are publicly accessible." on storage.objects
  for select using (bucket_id = 'documents');

create policy "Anyone can upload a file." on storage.objects
  for insert with check (bucket_id = 'documents');





create table business (
    id SERIAL PRIMARY KEY,
    
    existing_registration_id text null,
    type text null,
    establishment,
    operation_area,
    address_street text null,
    address_city text null,
    address_state text null,
    address_country text null,
    address_zip smallint null,
    phone varchar(20) null,
    email text null,
    no_workder

    status varchar(10) not null check (status in ('Pending', 'Approved', 'Rejected')),
    registration_type text null, (small/median/large)
    registration_level text null, (central/district)
    district text null, (7districts)
    user_id uuid,

    created_at timestamptz not null default now(),
    updated_at timestamptz null,
    deleted_at timestamptz null
);

create table business_owner (
    owner_name_mm text null,
    owner_name_eng text null,
    national_id text null,
    passport_no text null,
    address_street text null,
    address_city text null,
    address_state text null,
    address_country text null,
    address_zip smallint null,
    phone varchar(20) null,
    email text null,

    business_id,

    created_at timestamptz not null default now(),
    updated_at timestamptz null,
    deleted_at timestamptz null
);

create table business_additional (
    building_used text null, (own/lease)
    building_landlord_name text null,
    building_lease_period text null,
    land_used text null, (own/lease)
    land_landlord_name text null,
    land_lease_period text null,
    harmful_chemical_used text null, (yes/no)
    harmful_chemical_used_name text null,
    powerful_machine_uese text null, (yes/no)
    powerful_machine_uese_name text null, (yes/no)
    business_approved_gov text null, (yes/no) 
    business_id, 

    created_at timestamptz not null default now(),
    updated_at timestamptz null,
    deleted_at timestamptz null
);

business_owner_id text null, ForangeKey
shareholder_id text null, ForangeKey

create table business_owner (
    id SERIAL PRIMARY KEY,
    name text null,
    percentage text null,
    business_id,

    created_at timestamptz not null default now(),
    updated_at timestamptz null,
    deleted_at timestamptz null
);

create table business_applicant (
    id SERIAL PRIMARY KEY,
    name text null,
    national_id text null,
    passport_no text null,
    address_street text null,
    address_city text null,
    address_state text null,
    address_country text null,
    address_zip smallint null,
    phone varchar(20) null,
    email text null,
    signature text null,
    business_id, 

    created_at timestamptz not null default now(),
    updated_at timestamptz null,
    deleted_at timestamptz null
);   


